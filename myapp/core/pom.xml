<?xml version="1.0" encoding="UTF-8"?>
<!-- | Copyright 2017 Adobe Systems Incorporated | | Licensed under the Apache 
	License, Version 2.0 (the "License"); | you may not use this file except 
	in compliance with the License. | You may obtain a copy of the License at 
	| | http://www.apache.org/licenses/LICENSE-2.0 | | Unless required by applicable 
	law or agreed to in writing, software | distributed under the License is 
	distributed on an "AS IS" BASIS, | WITHOUT WARRANTIES OR CONDITIONS OF ANY 
	KIND, either express or implied. | See the License for the specific language 
	governing permissions and | limitations under the License. -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.org</groupId>
		<artifactId>myapp</artifactId>
		<version>1.0.0-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>
	<artifactId>myapp.core</artifactId>
	<name>MyApp - Core</name>
	<description>Core bundle for MyApp</description>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.sling</groupId>
				<artifactId>sling-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>biz.aQute.bnd</groupId>
				<artifactId>bnd-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>bnd-process</id>
						<goals>
							<goal>bnd-process</goal>
						</goals>
						<configuration>
							<bnd><![CDATA[
Import-Package: javax.annotation;version=0.0.0,*
                                ]]></bnd>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>biz.aQute.bnd</groupId>
				<artifactId>bnd-baseline-maven-plugin</artifactId>
				<configuration>
					<failOnMissing>false</failOnMissing>
				</configuration>
				<executions>
					<execution>
						<id>baseline</id>
						<goals>
							<goal>baseline</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
					</archive>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>codeQuality</id>
			<!-- Active by default. use `-P-codeQuality` to deactivate it. Note the 
				prefix `-` which disables the `codeQuality` profile Combine it with other 
				profiles using CVS. Example: `-P-codeQuality,autoInstallPackage` -->
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<!-- log in color, if terminal supports ANSI escape sequences see: https://confluence.atlassian.com/clover/using-test-optimization-in-maven-170492714.html -->
				<ansi.color>true</ansi.color>
			</properties>
			<!-- Code Quality Reporting -->
			<reporting>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-pmd-plugin</artifactId>
						<configuration>
							<skipEmptyReport>false</skipEmptyReport>
							<printFailingErrors>true</printFailingErrors>
							<!-- Dont use cache here, the lifesycle for `site` goal wont support 
								it -->
							<analysisCache>false</analysisCache>
							<targetJdk>1.8</targetJdk>
						</configuration>
						<reportSets>
							<reportSet>
								<reports>
									<report>pmd</report>
								</reports>
							</reportSet>
						</reportSets>
					</plugin>
					<plugin>
						<groupId>com.github.spotbugs</groupId>
						<artifactId>spotbugs-maven-plugin</artifactId>
						<configuration>
							<xmlOutput>true</xmlOutput>
							<trace>true</trace>
						</configuration>
						<reportSets>
							<reportSet>
								<reports>
									<report>spotbugs</report>
								</reports>
							</reportSet>
						</reportSets>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-checkstyle-plugin</artifactId>
						<configuration>
							<encoding>UTF-8</encoding>
							<failsOnError>true</failsOnError>
							<failOnViolation>true</failOnViolation>
							<violationSeverity>warning</violationSeverity>
							<includes>src/**\/*.java</includes>
							<configLocation>google_checks.xml</configLocation>
						</configuration>
						<reportSets>
							<reportSet>
								<reports>
									<report>checkstyle</report>
								</reports>
							</reportSet>
						</reportSets>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jxr-plugin</artifactId>
						<version>2.5</version>
					</plugin>
					<plugin>
						<groupId>org.openclover</groupId>
						<artifactId>clover-maven-plugin</artifactId>
						<reportSets>
							<reportSet>
								<reports>
									<report>clover</report>
								</reports>
							</reportSet>
						</reportSets>
					</plugin>
				</plugins>
			</reporting>
			<!-- Code Quality Execution -->
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-checkstyle-plugin</artifactId>
						<configuration>
							<encoding>UTF-8</encoding>
							<failsOnError>true</failsOnError>
							<failOnViolation>true</failOnViolation>
							<violationSeverity>warning</violationSeverity>
							<includes>src/**\/*.java</includes>
							<configLocation>google_checks.xml</configLocation>
						</configuration>
						<executions>
							<execution>
								<id>checkstyle</id>
								<goals>
									<goal>check</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.github.spotbugs</groupId>
						<artifactId>spotbugs-maven-plugin</artifactId>
						<configuration>
							<xmlOutput>true</xmlOutput>
							<trace>true</trace>
						</configuration>
						<executions>
							<execution>
								<id>spotbugs</id>
								<goals>
									<goal>check</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-pmd-plugin</artifactId>
						<configuration>
							<printFailingErrors>true</printFailingErrors>
							<analysisCache>true</analysisCache>
							<targetJdk>1.8</targetJdk>
						</configuration>
						<executions>
							<execution>
								<!-- run inverfy phase to allow analysis cache to work properly -->
								<goals>
									<goal>check</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- Clover configs to run Optimize, Report, Log and Check see: https://confluence.atlassian.com/clover/best-practices-for-maven-171180506.html -->
					<plugin>
						<groupId>org.openclover</groupId>
						<artifactId>clover-maven-plugin</artifactId>
						<configuration>
							<targetPercentage>20%</targetPercentage>
							<debug>true</debug>
						</configuration>
						<executions>
							<execution>
								<id>clover.inst</id>
								<phase>validate</phase>
								<goals>
									<!-- Instrumentation changes source code, we need to use instrument-test 
										because it forks a custom build lifecycle, runs only to the test phase If 
										we use a goal that does not fork, it will affect other plugins like PMD and 
										findbugs see: http://openclover.org/doc/maven/4.2.0/plugin-info.html -->
									<goal>instrument-test</goal>
								</goals>
							</execution>
							<execution>
								<id>clover.check</id>
								<!-- In the verify phase, we can generate the report, log results 
									and check coverage against configured targetPercentage. see: http://openclover.org/doc/maven/4.2.0/plugin-info.html -->
								<phase>verify</phase>
								<goals>
									<goal>clover</goal>
									<goal>log</goal>
									<goal>check</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
				        <groupId>org.codehaus.mojo</groupId>
				        <artifactId>license-maven-plugin</artifactId>
				        <version>2.0.0</version>
				        <executions>
				          <execution>
				            <id>download-licenses</id>
				            <goals>
				              <goal>download-licenses</goal>
				            </goals>
				          </execution>
				        </executions>
				      </plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<dependencies>
		<dependency>
			<groupId>uk.org.lidalia</groupId>
			<artifactId>slf4j-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- OSGi Dependencies -->
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.annotation.versioning</artifactId>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.annotation.bundle</artifactId>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.service.metatype.annotations</artifactId>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.service.component.annotations</artifactId>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.service.component</artifactId>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.service.cm</artifactId>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.service.event</artifactId>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.service.log</artifactId>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.framework</artifactId>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.resource</artifactId>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.util.tracker</artifactId>
		</dependency>
		<!-- Other Dependencies -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.jcr</groupId>
			<artifactId>jcr</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.sling</groupId>
			<artifactId>org.apache.sling.servlets.annotations</artifactId>
		</dependency>
		<dependency>
			<groupId>com.adobe.aem</groupId>
			<artifactId>uber-jar</artifactId>
		</dependency>
		<dependency>
			<groupId>com.adobe.cq</groupId>
			<artifactId>core.wcm.components.core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.sling</groupId>
			<artifactId>org.apache.sling.models.api</artifactId>
		</dependency>


		<!-- Testing -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit-addons</groupId>
			<artifactId>junit-addons</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.wcm</groupId>
			<artifactId>io.wcm.testing.aem-mock.junit5</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.apache.sling</groupId>
					<artifactId>org.apache.sling.models.impl</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-simple</artifactId>
				</exclusion>
			</exclusions>
			<scope>test</scope>
		</dependency>
		<!-- Required to be able to support injection with @Self and @Via -->
		<dependency>
			<groupId>org.apache.sling</groupId>
			<artifactId>org.apache.sling.models.impl</artifactId>
			<version>1.4.4</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
</project>
